// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  password            String         
  username            String

  workflows           Workflow[]
  credentials         Credentials[]
  executions          Execution[]

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}


model Workflow {
  id                   String         @id @default(uuid())
  title                String         
  isActive             Boolean        @default(false)
  
  userId              String
  user                User            @relation(fields: [userId], references: [id])

  webhookId           String?         @unique
  webhook             Webhook?        @relation(fields: [webhookId], references: [id])

  nodes               Node[]
  executions          Execution[]

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  triggerType         TriggerType      //manual, webhook

}


model Node {
  id                String          @id  @default(cuid())
  nodeId            String           //frontend generated Id To maintain consistency
  type              String          //hhtp webhook, cron, email, manual execution,gmail, slack
  position          Json
  parameters        Json           //Configuration data of type node { urls, methods,}


  workflowId        String
  Workflow          Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  connections       Json    

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt        

  @@unique([workflowId, id])

}




model Execution {
  id                String          @id  @default(cuid())
  status            ExecStatus
  mode              ExecutionMode        // "manual", " trigger", "webhhok"
  data              Json           //All execution data and node outputs

  workflowId        String
  workflow          Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  userId            String
  user              User            @relation(fields: [userId], references: [id])

  createdAt         DateTime        @default(now())
}


model Credentials {
  id               String           @id  @default(cuid())
  title            String
  platform         Platform          //googleApi, stripeApi,"apiKey", "httpHeaderAuth", "customApiKey" etc Credential type Identifier
  data             Json          //sensitive authentication information

  userId           String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Webhook {
  id              String            @id  @default(cuid())
  name            String            
  path            String
  method          Method
  workFlowId      Workflow?

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

enum ExecStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum Platform {
  ResendEmail
  Telegram
  Gemini
}

enum TriggerType {
  MANUAL
  WEBHOOK
  CRON
}

enum Method {
  GET
  POST 
  PUT
}

enum ExecutionMode {
  MANUAL
  TRIGGER
  WEBHOOK
  CRON
}

// model ExecutionLog {
//   id             String   @id @default(cuid())
//   executionId    String
//   execution      Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
//   nodeKey        String
//   status         ExecutionStatus
//   message        String?
//   data           Json?
//   timestamp      DateTime @default(now())
// };


// enum ExecutionStatus {
//   PENDING
//   RUNNING
//   SUCCESS
//   FAILED
//   CANCELLED
// }